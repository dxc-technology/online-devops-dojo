# GitHub workflow file
name: Deploy on demand Online DevOps Dojo coach lambda

on:
  issue_comment:
    types: [created, edited]

jobs:
  reaction_on_comment:
    runs-on: ubuntu-18.04
    if: startsWith(github.event.comment.body, '/deploy')

    steps:
      - name: Add reaction
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment-id: ${{ github.event.comment.id }}
          body: '**Go!**'
          reaction-type: rocket
  
  deploy_on_comment:
    runs-on: ubuntu-latest
    needs: reaction_on_comment
    timeout-minutes: 10
     
    steps:
      - name: "Triggered by ${{ github.actor }}"
        run: echo Workflow triggered by $GITHUB_ACTOR

      - name: Copy the repository
        uses: actions/checkout@v2.0.0
      
      # Node 10 is current default in ubuntu-latest (https://github.com/actions/virtual-environments/blob/master/images/linux/Ubuntu1804-README.md)
      # then we install 12, same as for AWS Lambda
      - name: Install Node 12
        uses: actions/setup-node@v1.4.1
        with:
          node-version: 12

      - name: Cache node modules  # not supported yet for issue_comment event
        uses: actions/cache@v1.1.2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Install nodejs packages listed in package-lock.json.
      - name: Install node modules
        run: npm ci --only=prod
  
      # run "serverless deploy --verbose" in a docker container and run the config file serverless.yml
      - name: Deploy lambda
        uses: serverless/github-action@v1.54.0
        env: # all mandatory
          # AWS
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_STAGE: ${{ secrets.AWS_STAGE }}
          # GITHUB APP
          APP_ID: ${{ secrets.APP_ID }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        with:
          args: deploy --verbose
